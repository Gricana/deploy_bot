import logging
import asyncio
import re
import os
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from api import *


logging.basicConfig(level=logging.INFO)


bot = Bot(token=os.environ.get('TG_BOT_TOKEN', '–¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'))
dp = Dispatcher(bot, storage=MemoryStorage())


class BotState(StatesGroup):
    new_project = State()
    project_name = State()
    description = State()
    repository = State()
    config = State()
    start = State()
    restart = State()
    stop = State()
    delete = State()


@dp.message_handler(commands=('start', ), state='*')
async def start(message: types.Message):
    username = message.from_user.username
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}!\n\n'
                        f'üõ† –Ø - –±–æ—Ç –ø–æ –∞–≤—Ç–æ–¥–µ–ø–ª–æ—é –≤–µ–±-–ø—Ä–æ–µ–∫—Ç–æ–≤ –Ω–∞ Python –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å '
                        f'–í–∞–º —Å –±—ã—Å—Ç—Ä—ã–º –∏ –ª—ë–≥–∫–∏–º —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ–º –≤–∞—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤. '
                        f'–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –í–∞—Å –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!\n\n'
                        f'–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new')


@dp.message_handler(commands=('new', ), state='*')
async def new_project(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (=–∏–º—è –ø–æ–¥–¥–æ–º–µ–Ω–∞ —Å–∞–π—Ç–∞)")
    await BotState.project_name.set()


@dp.message_handler(state=BotState.project_name)
async def process_project_name(message: types.Message, state: FSMContext):
    project_name = message.text.strip()
    pattern = r'^[a-zA-Z0-9-]{1,63}$'
    if not re.match(pattern, project_name):
        await message.answer('–ò–º—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ')
        return
    await state.update_data(name=project_name)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (–¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤)")
    await BotState.description.set()


@dp.message_handler(state=BotState.description)
async def process_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if len(description) < 5:
        await message.answer('–°–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ')
        return
    await state.update_data(username=message.from_user.username)
    await state.update_data(id=message.from_user.id)
    await state.update_data(description=description)

    data = await state.get_data()
    response = await create_project(data)
    await message.answer(response)

    await message.answer("–£–∫–∞–∂–∏—Ç–µ URL git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ `https://github.com/<username>/repository.git`",
                         disable_web_page_preview=True, parse_mode='Markdown')

    await BotState.repository.set()


@dp.message_handler(state=BotState.repository)
async def process_repository_url(message: types.Message, state: FSMContext):
    git_url = message.text.strip()

    pattern = r'https:\/\/(?:[^\s@\/]+@)?github\.com\/.+\/.+(\.git)?'
    print(re.match(pattern, git_url))
    if re.match(pattern, git_url) is None:
        await message.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≤–≤–æ–¥–∞ URL git-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
        return
    await state.update_data(repo_url=git_url)
    await message.answer('–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /config –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞')


@dp.message_handler(commands=('config', ), state='*')
async def config(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>TXT / JSON</b>\n\n"
                         "‚ùóÔ∏è–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ü–û–õ–ù–´–ô –ø–µ—Ä–µ—á–µ–Ω—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –í–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
                         parse_mode='html')
    await BotState.config.set()


@dp.message_handler(content_types=('document', ), state=BotState.config)
async def process_config(message: types.Message, state: FSMContext):
    if message.document.mime_type in ('text/plain', 'application/json'):
        file_info = await bot.get_file(message.document.file_id)
        file_bytes = await bot.download_file(file_info.file_path)
        file_content = file_bytes.read().decode('utf-8')
        file_name, file_ext = os.path.splitext(file_info.file_path)
        file_ext = file_ext.lstrip('.')
        await state.update_data(config=file_content, ext=file_ext)
        await message.answer('‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω')
        await message.answer('–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç /run')
        await BotState.start.set()
    else:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º <b>TXT / JSON</b>',
                             parse_mode='html')


@dp.message_handler(commands=('run', ), state='*')
async def run(message: types.Message, state: FSMContext):
    data = await state.get_data()
    response = await start_project(data)
    await message.answer(response)


@dp.message_handler(commands=('restart', ), state='*')
async def restart(message: types.Message, state: FSMContext):
    await BotState.restart.set()
    data = await state.get_data()
    response = await restart_project(data)
    await message.answer(response)


@dp.message_handler(commands=('stop', ), state='*')
async def stop(message: types.Message, state: FSMContext):
    await BotState.stop.set()
    data = await state.get_data()
    response = await stop_project(data)
    await message.answer(response)


@dp.message_handler(commands=('stop', ), state='*')
async def stop(message: types.Message, state: FSMContext):
    await BotState.stop.set()
    data = await state.get_data()
    response = await get_project(message.from_user.id)
    await message.answer(response)


if __name__ == '__main__':
    asyncio.run(dp.start_polling())
